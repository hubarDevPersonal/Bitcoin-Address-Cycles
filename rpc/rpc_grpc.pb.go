// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolutionClient is the client API for Solution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolutionClient interface {
	MineBlock(ctx context.Context, in *MineBlockRequest, opts ...grpc.CallOption) (*MineBlockResponse, error)
	CountCycles(ctx context.Context, in *CountCyclesRequest, opts ...grpc.CallOption) (*CountCyclesResponse, error)
}

type solutionClient struct {
	cc grpc.ClientConnInterface
}

func NewSolutionClient(cc grpc.ClientConnInterface) SolutionClient {
	return &solutionClient{cc}
}

func (c *solutionClient) MineBlock(ctx context.Context, in *MineBlockRequest, opts ...grpc.CallOption) (*MineBlockResponse, error) {
	out := new(MineBlockResponse)
	err := c.cc.Invoke(ctx, "/Solution/MineBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solutionClient) CountCycles(ctx context.Context, in *CountCyclesRequest, opts ...grpc.CallOption) (*CountCyclesResponse, error) {
	out := new(CountCyclesResponse)
	err := c.cc.Invoke(ctx, "/Solution/CountCycles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolutionServer is the server API for Solution service.
// All implementations must embed UnimplementedSolutionServer
// for forward compatibility
type SolutionServer interface {
	MineBlock(context.Context, *MineBlockRequest) (*MineBlockResponse, error)
	CountCycles(context.Context, *CountCyclesRequest) (*CountCyclesResponse, error)
	mustEmbedUnimplementedSolutionServer()
}

// UnimplementedSolutionServer must be embedded to have forward compatible implementations.
type UnimplementedSolutionServer struct {
}

func (UnimplementedSolutionServer) MineBlock(context.Context, *MineBlockRequest) (*MineBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MineBlock not implemented")
}
func (UnimplementedSolutionServer) CountCycles(context.Context, *CountCyclesRequest) (*CountCyclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCycles not implemented")
}
func (UnimplementedSolutionServer) mustEmbedUnimplementedSolutionServer() {}

// UnsafeSolutionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolutionServer will
// result in compilation errors.
type UnsafeSolutionServer interface {
	mustEmbedUnimplementedSolutionServer()
}

func RegisterSolutionServer(s grpc.ServiceRegistrar, srv SolutionServer) {
	s.RegisterService(&Solution_ServiceDesc, srv)
}

func _Solution_MineBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServer).MineBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Solution/MineBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServer).MineBlock(ctx, req.(*MineBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Solution_CountCycles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolutionServer).CountCycles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Solution/CountCycles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolutionServer).CountCycles(ctx, req.(*CountCyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Solution_ServiceDesc is the grpc.ServiceDesc for Solution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Solution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Solution",
	HandlerType: (*SolutionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MineBlock",
			Handler:    _Solution_MineBlock_Handler,
		},
		{
			MethodName: "CountCycles",
			Handler:    _Solution_CountCycles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
